{"version":3,"sources":["../../src/Subscriber.ts","../../src/Notifier.ts","../../src/Store.ts","Store.object.ts","Store.toggle.tsx","App.tsx","index.tsx"],"names":["Subscriber","createAction","get","set","value","shallow","nextValue","Object","_value","this","_listens","addListen","notify","listener","Boolean","Store","state","action","name","actions","createContext","createContainer","cycle","Context","_createAction","firePoint","fire","store","children","useState","useEffect","createElement","createSubscriber","context","useContext","createHook","select","selector","flags","setState","createHookAction","useObject","a","b","reset","add","key","flag","prev","useToggle","ToggleContainer","create","api","console","log","Check","toggle","setToggle","type","checked","onChange","Counter","num","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a57eb420.chunk.js","sourcesContent":["import { SetStateAction } from 'react'\nimport { ValueChanged } from './Notifier'\nimport { ShallowSetStateAction, StoreApi } from './type'\n\nexport class Subscriber<V, A> extends ValueChanged<V> {\n  action: A\n\n  get api() {\n    return {\n      get: () => this.value,\n      set: (value: SetStateAction<V>) => {\n        if (value instanceof Function) this.value = value(this.value)\n        else this.value = value\n      },\n      shallow: (value: ShallowSetStateAction<V>) => {\n        let nextValue: Partial<V>\n        if (value instanceof Function) nextValue = value(this.value)\n        else nextValue = value\n        const changed = Object.keys(nextValue).find((key) => {\n          return nextValue[key] !== this.value[key]\n        })\n        if (changed) {\n          this.value = Object.assign({}, this.value, nextValue)\n        }\n      }\n    }\n  }\n\n  constructor(value: V, createAction: (api: StoreApi<V>) => A) {\n    super(value)\n    this.action = createAction(this.api)\n  }\n}\n","type Listener = () => void\n\nexport class Notifier {\n  private _listens: Listener[] = []\n\n  get hasListen(): boolean {\n    return Boolean(this._listens.length)\n  }\n\n  addListen(listener: Listener): () => void {\n    this._listens.push(listener)\n    return () => {\n      this._listens.splice(this._listens.indexOf(listener), 1)\n    }\n  }\n\n  protected notify(): void {\n    this._listens.forEach((listener) => listener())\n  }\n}\n\nexport class ValueChanged<V> extends Notifier {\n  constructor(private _value: V) {\n    super()\n  }\n\n  get value(): V {\n    return this._value\n  }\n\n  set value(value: V) {\n    if (this._value === value) return\n    this._value = value\n    this.notify()\n  }\n}\n","import {\n  Context,\n  createContext,\n  createElement,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState\n} from 'react'\n\nimport {\n  StoreProps,\n  HookSelector,\n  ContainerLifeCycle,\n  ContainerLifePoint,\n  ActionCreator\n} from './type'\nimport { Subscriber } from './Subscriber'\n\nexport class Store<State, Action> {\n  private Context: Context<Subscriber<State, Action>>\n  private _createAction: ActionCreator<State, Action>\n\n  constructor({ state, action, name }: StoreProps<State, Action>) {\n    if (typeof action === 'function') {\n      this._createAction = action\n    } else {\n      this._createAction = (api) => {\n        const actions = {} as Action\n        Object.keys(action).forEach((key) => {\n          actions[key] = action[key](api)\n        })\n        return actions\n      }\n    }\n    this.Context = createContext(new Subscriber(state, this._createAction))\n    this.Context.displayName = name\n  }\n\n  createContainer(cycle: ContainerLifeCycle<State, Action> = {}) {\n    const { Context, _createAction } = this\n    type Props = { state: State; children: ReactNode }\n\n    const firePoint = (\n      store: Subscriber<State, Action>,\n      fire?: ContainerLifePoint<State, Action>\n    ) => fire && fire(store.api, store.action)\n\n    return ({ children, state }: Props) => {\n      const [store] = useState(() => new Subscriber(state, _createAction))\n\n      useEffect(() => {\n        firePoint(store, cycle.create)\n        return () => firePoint(store, cycle.dispose)\n      }, [store])\n\n      useEffect(() => {\n        if (store.value !== state) {\n          store.value = state\n          firePoint(store, cycle.update)\n        }\n      }, [state, store])\n\n      return createElement(Context.Provider, { value: store, children })\n    }\n  }\n\n  createSubscriber() {\n    const { Context } = this\n    type Props = { children: (state: State, action: Action) => ReactNode }\n\n    return ({ children }: Props) => {\n      const context = useContext(Context)\n      return children(context.value, context.action)\n    }\n  }\n\n  createHook<Value = State, Flags extends any[] = never>(\n    selector?: HookSelector<State, Value, Flags>\n  ) {\n    const { Context } = this\n    type Select = (state: State, ...flags: Flags) => Value\n    const select = (selector || ((v) => v)) as Select\n    return (...flags: Flags): [Value, Action] => {\n      const store = useContext(Context)\n      const [state, setState] = useState(() => select(store.value, ...flags))\n\n      useEffect(() => {\n        setState(select(store.value, ...flags))\n        return store.addListen(() => setState(select(store.value, ...flags)))\n      }, [store, ...flags])\n\n      return [state, store.action]\n    }\n  }\n\n  createHookAction() {\n    return () => useContext(this.Context).action\n  }\n}\n","import { Store } from 'react-sweet-context'\n\nconst state = { a: 0, b: 0 }\ntype StateType = typeof state\n\nconst store = new Store({\n  name: 'ObjectStore',\n  state,\n  action: ({ get, set, shallow }) => ({\n    reset: () => set({ a: 0, b: 0 }),\n\n    add(key: keyof StateType) {\n      shallow({ [key]: get()[key] + 1 })\n    }\n  })\n})\n\nexport const useObject = store.createHook(\n  (state, flag: 'a' | 'b') => state[flag]\n)\n","import { Store } from 'react-sweet-context'\n\nconst store = new Store({\n  name: 'Toggle',\n  state: false,\n  action({ set }) {\n    return (state?: boolean) => set((prev) => state ?? !prev)\n  }\n})\n// hook re-render when state changed\nexport const useToggle = store.createHook()\n\n// hook get only action and does not re-render when state change\nexport const useToggleAction = store.createHookAction()\n\n// Context Provider container of this store\nexport const ToggleContainer = store.createContainer({\n  // trigger on container will be mount\n  // action is return value when store instance created\n  create(api, action) {\n    console.log(api.get())\n    console.log(action)\n  }\n})\n","import React from 'react'\nimport { useObject } from './Store.object'\nimport { ToggleContainer, useToggle } from './Store.toggle'\n\nconst Check = () => {\n  const [toggle, setToggle] = useToggle()\n\n  return (\n    <label>\n      <input type='checkbox' checked={toggle} onChange={() => setToggle()} />\n      Toggle store\n    </label>\n  )\n}\n\nconst Counter = ({ flag }: { flag: 'a' | 'b' }) => {\n  const [num, action] = useObject(flag)\n  return (\n    <button type='button' onClick={() => action.add(flag)}>\n      Num \"{flag}\": {num}\n    </button>\n  )\n}\n\nconst App = () => {\n  return (\n    <div>\n      <div>\n        <Check />\n        <Check />\n      </div>\n\n      <div>\n        <ToggleContainer state={true}>\n          <Check />\n        </ToggleContainer>\n        <ToggleContainer state={false}>\n          <Check />\n        </ToggleContainer>\n      </div>\n\n      <div>\n        <Counter flag='a' />\n        <Counter flag='b' />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}